# 机场订阅
# Airport1 Airport2 为机场名称，可自定义
proxy-providers:
  Airport1:
    url: "填写订阅链接1"
    filter: "^(?!.*(剩余|流量|到期|套餐|官网|官方|游戏|发布|订阅|地址|访问|欢迎|IPV6)).*$"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    header:
      User-Agent:
      - "Clash.meta"
      - "Clash"
      - "mihomo"
    Airport1:
    url: "填写订阅链接2"
    filter: "^(?!.*(剩余|流量|到期|套餐|官网|官方|游戏|发布|订阅|地址|访问|欢迎|IPV6)).*$"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 🟢 直连
    header:
      User-Agent:
      - "Clash.meta"
      - "Clash"
      - "mihomo"


# 节点信息
proxies:
  - {name: 🟢 直连, type: direct, udp: true}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "rule-set:private_domain,cn_domain"
    - "dlg.io.mi.com"
    - "+.push.apple.com"
    - "+.apple.com"
    - "+.wechat.com"
    - "+.qpic.cn"
    - "+.qq.com"
    - "+.wechatapp.com"
    - "+.vivox.com"
    - "+.oray.com"
    - "+.sunlogin.net"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - "+.pool.ntp.org"
    - "+.ntp.tencent.com"
    - "+.ntp1.aliyun.com"
    - "+.ntp.ntsc.ac.cn"
    - "+.cn.ntp.org.cn"
  default-nameserver:
    - 101.101.101.101
    - 223.5.5.5
  proxy-server-nameserver:
    - 101.101.101.101
    - 223.5.5.5
  nameserver:
    - https://1.1.1.1/dns-query#🚀 节点选择
    - https://8.8.8.8/dns-query#🚀 节点选择
    - tls://8.8.4.4#🚀 节点选择
    - tls://1.0.0.1#🚀 节点选择
  nameserver-policy:
    "rule-set:cn_domain,private_domain":
      - https://223.6.6.6/dns-query
      - https://223.5.5.5/dns-query
    "rule-set:gfw_domain,geolocation-!cn":
      - https://1.1.1.1/dns-query#🚀 节点选择
      - https://8.8.8.8/dns-query#🚀 节点选择

pr: &pr {type: select, proxies: [🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🌐 全部节点, 🟢 直连]}

proxy-groups:
  - {name: 🚀 节点选择, type: select, proxies: [♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点, 🌐 全部节点, 🟢 直连]}
  # 这里的 dns 指海外解析 dns 走的节点，一般跟随节点选择即可
#  - {name: 🔍 dns, <<: *pr }
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "^((?!(直连)).)*$"}
  - {name: 🎯 全球直连, type: select, proxies: [🟢 直连]}
  - {name: 🔔 谷歌服务, <<: *pr}
#  - {name: 🔔 谷歌FCM, <<: *pr}
  - {name: 🍎 苹果服务, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: Ⓜ️ 微软必应, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: Ⓜ️ 微软服务, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: Ⓜ️ 微软云盘, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 💬 AI, type: select, proxies: [🟢 直连, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
#  - {name: 💬 gemini, type: select, proxies: [🟢 直连, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
#  - {name: 💬 copilot, type: select, proxies: [🟢 直连, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
#  - {name: 💬 chagpt, type: select, proxies: [🟢 直连, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
#  - {name: 💬 Claude, type: select, proxies: [🟢 直连, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: 🎮 游戏平台, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
#  - {name: 🎮 EPIC, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
#  - {name: 🎮 STEAM, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: 🎥 DISNEY+, <<: *pr}
  - {name: 🐦 Twitter, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 🎧 Spotify, type: select, proxies: [🇺🇸 美国节点, 🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇬🇧 英国节点]}
  - {name: ✈️ Speedtest, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: 🐲 巴哈姆特, type: select, proxies: [🇨🇳 台湾节点, 🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点,  🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
#  - {name: 📺 哔哩哔哩, type: select, proxies: [🟢 直连, 🚀 节点选择, ♻️ 自动选择, 🇭🇰 香港节点, 🇨🇳 台湾节点, 🇯🇵 日本节点, 🇰🇷 韩国节点, 🇸🇬 新加坡节点, 🇺🇸 美国节点, 🇬🇧 英国节点]}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: 🇭🇰 香港节点, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)港|🇭🇰|香港|HK|Hong" }
  - {name: 🇨🇳 台湾节点, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)台|🇨🇳|台湾|TW|Tai" }
  - {name: 🇯🇵 日本节点, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)日|🇯🇵|日本|JP|Japan" }
  - {name: 🇰🇷 韩国节点, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)韩|🇰🇷|韩国|KR|Korea" }
  - {name: 🇸🇬 新加坡节点, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)🇸🇬|新加坡|狮城|SG|Singapore" }
  - {name: 🇺🇸 美国节点, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)美|us|unitedstates|united states" }
  - {name: 🇬🇧 英国节点, type: url-test, include-all: true, tolerance: 100, interval: 300, filter: "(?i)🇬🇧|英国|英|英格兰|UK|United Kingdom" }
  - {name: 🌐 全部节点, type: select, include-all: true}
rules:
#  让某个域名走某个代理(举例让所有asus.com走直连,如需使用去掉下面的注释)
#  - DOMAIN-SUFFIX,asus.com,🎯 全球直连
#  让某个IP走某个代理（举例让内网某台设备走直连,如需使用去掉下面的注释）
#  - SRC-IP-CIDR,192.168.1.2/32,🎯 全球直连
#  以下为正式规则
  - RULE-SET,private_domain,🎯 全球直连
#  - RULE-SET,GoogleFCM,🔔 谷歌FCM
  - RULE-SET,applecn_domain,🍎 苹果服务
  - RULE-SET,apple_domain,🍎 苹果服务
  - RULE-SET,proxylite,🚀 节点选择
  - RULE-SET,steamcn_domain,🎯 全球直连
#  - RULE-SET,epiccn_domain,🎯 全球直连
  - RULE-SET,gamecn_domain,🎯 全球直连
#  - RULE-SET,chagpt,💬 chagpt
#  - RULE-SET,gemini,💬 gemini
#  - RULE-SET,copilot,💬 copilot
#  - RULE-SET,claude,💬 Claude
  - RULE-SET,ai_domain,💬 AI
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🔔 谷歌服务
  - RULE-SET,bing_domain,Ⓜ️ 微软必应
  - RULE-SET,onedrive_domain,Ⓜ️ 微软云盘
  - RULE-SET,microsoft_domain,Ⓜ️ 微软服务
  - RULE-SET,telegram_domain,📲 Telegram
#  - RULE-SET,epic_domain,🎮 EPIC
#  - RULE-SET,steam_domain,🎮 STEAM
#  - RULE-SET,origin,🎮 游戏平台
#  - RULE-SET,sony,🎮 游戏平台
#  - RULE-SET,nintendo,🎮 游戏平台
#  - RULE-SET,blizzard,🎮 游戏平台
  - RULE-SET,game_domain,🎮 游戏平台
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,disney_domain,🎥 DISNEY+
  - RULE-SET,twitter_domain,🐦 Twitter
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,spotify_domain,🎧 Spotify
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,bahamut_domain,🐲 巴哈姆特
#  - RULE-SET,bilibili_domain,📺 哔哩哔哩
#  - RULE-SET,direct1,🎯 全球直连
  - RULE-SET,cn_domain,🎯 全球直连
  - RULE-SET,ChinaDomain,🎯 全球直连
  - RULE-SET,ChinaCompanyIp,🎯 全球直连
  - RULE-SET,Download,🎯 全球直连
  - RULE-SET,geolocation-!cn,🚀 节点选择
  - RULE-SET,google_ip,🔔 谷歌服务,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 全球直连
  - MATCH,🐟 漏网之鱼
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
#  绕过局域网
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
#  direct1: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list" }
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/master/ProxyLite.list" }
#  猫猫的直连规则
  ChinaDomain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaDomain.list" }
  ChinaCompanyIp: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/ChinaCompanyIp.list" }
  Download: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Download/Download.list" }
#  AI人工智能
  ai_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
#  chagpt: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.list" }
#  gemini: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Gemini/Gemini.list" }
#  copilot: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Copilot/Copilot.list" }
#  claude: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Claude/Claude.list" }
#  download: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Download.list" }
#  china: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/China/China.list" }
#  谷歌服务
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
#  谷歌FCM
#  GoogleFCM: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/GoogleFCM.list" }
#  电报
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
#  微软服务
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  bing_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bing.mrs" }
#  苹果服务
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple.mrs" }
  applecn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
#  速度测试
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
#  游戏平台
  steamcn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam@cn.mrs" }
  steam_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/steam.mrs" }
  epic_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/epicgames.mrs" }
#  epiccn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/epicgames@cn.mrs" }
  gamecn_domain: { <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-games@cn.mrs" }
  game_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-games.mrs" }
#  origin: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Origin/Origin.list" }
#  sony: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Sony/Sony.list" }
#  nintendo: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Nintendo/Nintendo.list" }
#  blizzard: { <<: *class, url: "https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Blizzard/Blizzard.list" }
#  影音娱乐
  twitter_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.mrs" }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  spotify_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  disney_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/disney.mrs" }
#  哔哩哔哩
  bilibili_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.mrs" }
#  巴哈姆特
  bahamut_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bahamut.mrs" }
#  国外网站
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs" }
#  国内网站
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }

#  IP规则
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
